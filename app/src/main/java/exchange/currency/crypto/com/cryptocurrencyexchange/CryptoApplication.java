package exchange.currency.crypto.com.cryptocurrencyexchange;

import android.app.Activity;
import android.app.Application;

import dagger.android.AndroidInjector;
import dagger.android.HasActivityInjector;


/**
 * The Android {@link Application}.
 * <p>
 * <b>DEPENDENCY INJECTION</b>
 * The entry point of all dependency injection is the App, which implements HasActivityInjector
 * that provides a dagger injected DispatchingAndroidInjector<Activity>. This indicates that
 * activities are to participate in dagger.android injection.
 *
 * We could extend {@link dagger.android.DaggerApplication} so we can get the boilerplate
 * dagger code for free. However, we want to avoid inheritance (if possible and it is in this case)
 * so that we have to option to inherit from something else later on if needed
 */
public class CryptoApplication extends Application implements HasActivityInjector {

    /**
     * The top-most level injection occurs in onCreate with DaggerAppComponent.create().inject(this),
     * which is a class that is generated by Dagger during compile-time based on the AppComponent.
     */
    @Override
    public void onCreate() {
        super.onCreate();
        DaggerAppComponent.builder().create(this).inject(this);

    }

    @Override
    public AndroidInjector<Activity> activityInjector() {
        return null;
    }
}
